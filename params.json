{"name":"SH","tagline":"Erlang Shell Executor","body":"SH Executor\r\n===========\r\n\r\nFamily of functions and ports involving interacting with the system shell,\r\npaths and external programs.\r\n\r\nReason\r\n------\r\n\r\n```erlang\r\n> Email = \"hacker+/somepath&reboot#@example.com\". % this is a valid email!\r\n> os:cmd([\"mkdir -p \", Email]).\r\n% path clobbering and a reboot may happen here!\r\n```\r\n\r\nExamples\r\n--------\r\n\r\n### Onliners\r\n\r\n```erlang\r\n> erlsh:oneliner([\"touch\", filename:join(\"/tmp/\", Path)]).\r\n{done,0,<<>>}\r\n\r\n> erlsh:oneliner(\"uname -v\"). % oneliner/1,2 funs do not include newlines\r\n{done,0,\r\n      <<\"Darwin Kernel Version 12.4.0: Wed May  1 17:57:12 PDT 2013; root:xnu-2050.24.15~1/RELEASE_X86_64\">>}\r\n\r\n> erlsh:oneliner(\"git describe --always\").\r\n{done,128,<<\"fatal: Not a valid object name HEAD\">>}\r\n\r\n> erlsh:oneliner(\"git describe --always\", \"/tank/proger/vxz/otp\").\r\n{done,0,<<\"OTP_R16B01\">>}\r\n```\r\n\r\n### Escaping\r\n\r\n```erlang\r\n> Path = erlsh_path:escape(\"email+=/subdir@example.com\").\r\n\"email+=%2Fsubdir@example.com\"\r\n```\r\n\r\n### Run\r\n\r\n```erlang\r\n> erlsh:run([\"git\", \"clone\", \"https://github.com/proger/darwinkit.git\"], binary, \"/tmp\").\r\n{done,0,<<\"Cloning into 'darwinkit'...\\n\">>}\r\n\r\n> UserUrl = \"https://github.com/proger/darwinkit.git\".\r\n\"https://github.com/proger/darwinkit.git\"\r\n> erlsh:run([\"git\", \"clone\", UserUrl], binary, \"/tmp\").\r\n{done,128,\r\n      <<\"fatal: destination path 'darwinkit' already exists and is not an empty directory.\\n\">>}\r\n\r\n> erlsh:run([\"ifconfig\"], \"/tmp/output.log\", \"/tank/proger/vxz/otp\").\r\n{done,0,\"/tmp/output.log\"}\r\n\r\n% cat /tmp/output.log\r\n>>> {{2013,8,28},{8,39,14}} /sbin/ifconfig\r\nlo0: flags=8049<UP,LOOPBACK,RUNNING,MULTICAST> mtu 16384\r\n\toptions=3<RXCSUM,TXCSUM>\r\n\tinet6 fe80::1%lo0 prefixlen 64 scopeid 0x1\r\n\tinet 127.0.0.1 netmask 0xff000000\r\n\tinet6 ::1 prefixlen 128\r\ngif0: flags=8010<POINTOPOINT,MULTICAST> mtu 1280\r\nstf0: flags=0<> mtu 1280\r\nen0: flags=8863<UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST> mtu 1500\r\n\tether 7c:d1:c3:e9:24:65\r\n\tinet6 fe80::7ed1:c3ff:fee9:2465%en0 prefixlen 64 scopeid 0x4\r\n\tinet 192.168.63.163 netmask 0xfffffc00 broadcast 192.168.63.255\r\n\tmedia: autoselect\r\n\tstatus: active\r\np2p0: flags=8843<UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST> mtu 2304\r\n\tether 0e:d1:c3:e9:24:65\r\n\tmedia: autoselect\r\n\tstatus: inactive\r\n>>> {{2013,8,28},{8,39,14}} exit status: 0\r\n```\r\n\r\nfdlink Port\r\n-----------\r\n\r\nConsider a case of spawning a port that does not actually\r\nread its standard input (e.g. `socat` that bridges `AF_UNIX` with `AF_INET`):\r\n\r\n```shell\r\n# pstree -A -a $(pgrep make)\r\nmake run\r\n  `-sh -c...\r\n      `-beam.smp -- -root /usr/lib/erlang -progname erl -- -home /root -- -pa ebin -config run/sys.config -eval[ok = application:\r\n          |-socat tcp-listen:32133,reuseaddr,bind=127.0.0.1 unix-connect:/var/run/docker.sock\r\n          `-16*[{beam.smp}]\r\n```\r\n\r\nIf you terminate the node, `beam` will close the port but the process\r\nwill still remain alive (thus, it will leak). To mitigate this issue,\r\nyou can use `fdlink` that will track `stdin` availability for you:\r\n\r\n``` shell\r\n# pstree -A -a $(pgrep make)\r\nmake run\r\n  `-sh -c...\r\n      `-beam.smp -- -root /usr/lib/erlang -progname erl -- -home /root -- -pa ebin -config run/sys.config -eval[ok = application:\r\n          |-fdlink /usr/bin/socat tcp-listen:32133,reuseaddr,bind=127.0.0.1 unix-connect:/var/run/docker.sock\r\n          |   `-socat tcp-listen:32133,reuseaddr,bind=127.0.0.1 unix-connect:/var/run/docker.sock\r\n          `-16*[{beam.smp}]\r\n```\r\n\r\n### Using\r\n\r\n```erlang\r\n> Fdlink = sh:fdlink_executable().               % make sure your app dir is setup correctly\r\n> Fdlink = filename:join(\"./priv\", \"fdlink\").    % in case you're running directly from erlsh root\r\n> erlang:open_port({spawn_executable, Fdlink}, [stream, exit_status, {args, [\"/usr/bin/socat\"|RestOfArgs]}).\r\n```\r\n\r\n`fdlink` will also close the standard input of its child process.\r\n\r\nCredits\r\n-------\r\n\r\n* Vladimir Kirillov\r\n\r\nOM A HUM\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}